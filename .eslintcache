[{"D:\\d-dev\\my-open-source\\datepicker-react\\src\\index.js":"1","D:\\d-dev\\my-open-source\\datepicker-react\\src\\serviceWorker.js":"2","D:\\d-dev\\my-open-source\\datepicker-react\\src\\App.js":"3","D:\\d-dev\\my-open-source\\datepicker-react\\src\\datepicker\\datepickerContext.js":"4","D:\\d-dev\\my-open-source\\datepicker-react\\src\\date_picker_demo.js":"5","D:\\d-dev\\my-open-source\\datepicker-react\\src\\datepicker\\Datepicker.jsx":"6","D:\\d-dev\\my-open-source\\datepicker-react\\src\\datepicker\\Config.js":"7","D:\\d-dev\\my-open-source\\datepicker-react\\src\\datepicker\\helpers\\calendar.js":"8"},{"size":258,"mtime":1611092865143,"results":"9","hashOfConfig":"10"},{"size":5083,"mtime":1611092865145,"results":"11","hashOfConfig":"10"},{"size":1177,"mtime":1611426489278,"results":"12","hashOfConfig":"10"},{"size":241,"mtime":1611306391173,"results":"13","hashOfConfig":"10"},{"size":776,"mtime":1611306944666,"results":"14","hashOfConfig":"10"},{"size":7703,"mtime":1611425839371,"results":"15","hashOfConfig":"10"},{"size":94,"mtime":1611136947961,"results":"16","hashOfConfig":"10"},{"size":2858,"mtime":1611308115366,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1r7wenn",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"D:\\d-dev\\my-open-source\\datepicker-react\\src\\index.js",[],["37","38"],"D:\\d-dev\\my-open-source\\datepicker-react\\src\\serviceWorker.js",[],"D:\\d-dev\\my-open-source\\datepicker-react\\src\\App.js",[],"D:\\d-dev\\my-open-source\\datepicker-react\\src\\datepicker\\datepickerContext.js",[],"D:\\d-dev\\my-open-source\\datepicker-react\\src\\date_picker_demo.js",[],"D:\\d-dev\\my-open-source\\datepicker-react\\src\\datepicker\\Datepicker.jsx",["39","40"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport DatepickerContext from './datepickerContext';\r\n\r\nimport Config from './Config';\r\n\r\nimport {\r\n  CALENDAR_WEEK_DAYS,\r\n  THIS_YEAR,\r\n  THIS_MONTH,\r\n  getMonthsObj,\r\n  getMonthDates,\r\n  getEmptyDates,\r\n  getTodayDate,\r\n  getYearAfterDiff,\r\n  getMonthAfterDiff,\r\n  calcIsLastMonth,\r\n} from './helpers/calendar';\r\n\r\nimport './datepicker.css';\r\n\r\nfunction Datepicker() {\r\n  const date_picker_context = useContext(DatepickerContext);\r\n\r\n  const [monthDates, setMonthDates] = useState(getMonthDates());\r\n  const [emptyDates, setEmptyDates] = useState(getEmptyDates());\r\n  const [currentMonth, setCurrentMonth] = useState(THIS_MONTH);\r\n  const [currentYear, setCurrentYear] = useState(THIS_YEAR);\r\n  const [dropdownIsShow, setDropdownIsShow] = useState(false);\r\n  const [dropdownTitle, setDropdownTitle] = useState('');\r\n\r\n  const [displayMonths, setDisplayMonths] = useState([]);\r\n  const [monthsForDropdown, setMonthsForDropdown] = useState(\r\n    getMonthsObj(date_picker_context.maxMonths)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const { monthDisplayStyle } = date_picker_context;\r\n    const value_of_months = [];\r\n    // GET DATES OBJ TO DISPLAY AT DROPDOWN AS MONTH AND YEAR\r\n    setDisplayMonths(\r\n      Object.entries(monthsForDropdown).map((month_dropdown) => {\r\n        let month_for_display = month_dropdown[1].toLocaleString('default', {\r\n          month: monthDisplayStyle || 'long',\r\n        });\r\n        month_for_display += ' ' + month_dropdown[1].getFullYear();\r\n        value_of_months.push([\r\n          month_dropdown[1].getFullYear(),\r\n          month_dropdown[1].getMonth(),\r\n        ]);\r\n        return month_for_display;\r\n      })\r\n    );\r\n\r\n    if (dropdownTitle || !monthsForDropdown[0]) return;\r\n    // DEFAULT HEADLINE / TITLE :\r\n    setDropdownTitle(\r\n      monthsForDropdown[0].toLocaleString('default', { month: 'long' }) +\r\n        ' ' +\r\n        monthsForDropdown[0].getFullYear()\r\n    );\r\n  }, []);\r\n\r\n  // GENERAL DROPDOWN\r\n  const openDropdown = () => {\r\n    setDropdownIsShow(!dropdownIsShow);\r\n  };\r\n\r\n  const closeDropdown = () => {\r\n    dropdownIsShow && setDropdownIsShow(false);\r\n  };\r\n\r\n  const isFirstMonth = () => {\r\n    return currentMonth === THIS_MONTH && currentYear === THIS_YEAR;\r\n  };\r\n\r\n  const isLastMonth = () => {\r\n    const { maxMonths } = date_picker_context;\r\n    return calcIsLastMonth(currentMonth, currentYear, maxMonths);\r\n    // return currentMonth === THIS_MONTH && currentYear !== THIS_YEAR;\r\n  };\r\n\r\n  const isBlockedDay = (i) => {\r\n    const { blockedDats } = date_picker_context;\r\n    i++; // location 0 is really 1st of the month\r\n    return (\r\n      (blockedDats &&\r\n        blockedDats.find(\r\n          (item) =>\r\n            item.dd === i && item.mm === currentMonth && item.yy === currentYear\r\n        )) ||\r\n      (THIS_YEAR === currentYear &&\r\n        THIS_MONTH === currentMonth &&\r\n        i < getTodayDate())\r\n    );\r\n  };\r\n\r\n  const handlePickDate = (i) => {\r\n    if (isBlockedDay(i)) return;\r\n    i++;\r\n    let t = new Date(currentYear, currentMonth, i);\r\n    let selectedDate = [currentYear, currentMonth, i];\r\n    // CHECK IF NEED TO CLEAR IT (DOUBLE CLICK ON THE SAME DATE)\r\n    selectedDate =\r\n      date_picker_context.selectedDate[0] === selectedDate[0] &&\r\n      date_picker_context.selectedDate[1] === selectedDate[1] &&\r\n      date_picker_context.selectedDate[2] === selectedDate[2]\r\n        ? []\r\n        : selectedDate;\r\n\r\n    date_picker_context.setSelectedDate(selectedDate);\r\n    // RETURN IF WE CLEARED THE DATE :\r\n    if (!selectedDate[0]) return;\r\n\r\n    console.log(t); // DISPLAY DATE OBJECT\r\n  };\r\n\r\n  // DROPDOWN\r\n  const handlePickMonth = (value) => {\r\n    const [year, month, dropdown_title] = value;\r\n    // CREATE THE DATES :\r\n    setMonthDates(getMonthDates(+month, +year));\r\n    setEmptyDates(getEmptyDates(+month, +year));\r\n    // monthDates,\r\n    // emptyDates,\r\n    setCurrentMonth(+month);\r\n    setCurrentYear(+year);\r\n    setDropdownTitle(dropdown_title);\r\n    // });\r\n  };\r\n\r\n  //ARROWS\r\n  const handleMonthArrow = (diff) => {\r\n    // CHEACK IF LAST MONTH OR MORE THAN 12 MONTHS FROM NOW\r\n    if (diff < 0 && isFirstMonth()) return;\r\n    if (diff > 0 && isLastMonth()) return;\r\n\r\n    // CALC AND CHANGE MONTH AND YEAR\r\n    let year = getYearAfterDiff(currentYear, currentMonth, diff);\r\n    let month = getMonthAfterDiff(currentMonth, diff);\r\n\r\n    //GET THE DATA IN ORDER TO USE: (fn) handlePickMonth\r\n    let m = new Date(year, month, 1);\r\n    let dropdown_title = m.toLocaleString('default', { month: 'long' });\r\n    dropdown_title += ' ' + m.getFullYear();\r\n    const value = [year, month, dropdown_title];\r\n    handlePickMonth(value);\r\n  };\r\n\r\n  const {\r\n    selectedDate,\r\n    //titles\r\n    guideAvailable,\r\n    guide2,\r\n    headline = Config.default_headline,\r\n  } = date_picker_context;\r\n\r\n  return (\r\n    <div\r\n      className=\"datepicker-container\"\r\n      onClick={() => closeDropdown()}\r\n      style={{ direction: 'rtl' }}>\r\n      <div className=\"close\"></div>\r\n      <span className=\"datepicker-headline\">{headline}</span>\r\n\r\n      <div className=\"months-container\" onClick={() => openDropdown()}>\r\n        <div className=\"months-dropdown\">\r\n          <span>\r\n            <i\r\n              className={\r\n                'dorpdown-arrow ' + (dropdownIsShow ? 'up' : 'down')\r\n              }></i>\r\n            {dropdownTitle}\r\n          </span>\r\n\r\n          <ul className={'months-select ' + (dropdownIsShow ? 'show' : 'hide')}>\r\n            {displayMonths.map((month, i) => (\r\n              <li\r\n                className=\"month\"\r\n                key={i}\r\n                onClick={() =>\r\n                  handlePickMonth([\r\n                    monthsForDropdown[i].getFullYear(),\r\n                    monthsForDropdown[i].getMonth(),\r\n                    month,\r\n                  ])\r\n                }>\r\n                {month}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className=\"arrows\">\r\n        <i\r\n          className={'arrow right ' + (isFirstMonth() ? ' disabeld' : '')}\r\n          onClick={() => handleMonthArrow(-1)}></i>\r\n\r\n        <i\r\n          className={'arrow left ' + (isLastMonth() ? ' disabeld' : '')}\r\n          onClick={() => handleMonthArrow(1)}></i>\r\n      </div>\r\n\r\n      <div className=\"calendar\">\r\n        <div className=\"dates\">\r\n          {CALENDAR_WEEK_DAYS.map((dayName) => (\r\n            <div className=\"day\" key={dayName}>\r\n              {dayName}\r\n            </div>\r\n          ))}\r\n\r\n          {emptyDates.map((d, i) => (\r\n            <div className=\"date-number empty\" key={i}></div>\r\n          ))}\r\n\r\n          {monthDates.map((day, i) => (\r\n            <div\r\n              className={\r\n                isBlockedDay(i)\r\n                  ? 'date-number unavailable'\r\n                  : selectedDate &&\r\n                    currentYear === selectedDate[0] &&\r\n                    currentMonth === selectedDate[1] &&\r\n                    day === selectedDate[2]\r\n                  ? 'date-number  available selected'\r\n                  : 'date-number available'\r\n              }\r\n              key={i}\r\n              onClick={() => handlePickDate(i)}>\r\n              {day}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"date-picker guide-container\">\r\n        <div className=\"guide\">\r\n          <i className=\"date-number available\"></i>\r\n          <span> {guideAvailable}</span>\r\n        </div>\r\n        <div className=\"guide\">\r\n          <i className=\"guide-circle charter\"></i>\r\n          <span>{guide2}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Datepicker;\r\n","D:\\d-dev\\my-open-source\\datepicker-react\\src\\datepicker\\Config.js",[],"D:\\d-dev\\my-open-source\\datepicker-react\\src\\datepicker\\helpers\\calendar.js",[],["41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":32,"column":29,"nodeType":"49","messageId":"50","endLine":32,"endColumn":49},{"ruleId":"51","severity":1,"message":"52","line":61,"column":6,"nodeType":"53","endLine":61,"endColumn":8,"suggestions":"54"},{"ruleId":"43","replacedBy":"55"},{"ruleId":"45","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'setMonthsForDropdown' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'date_picker_context', 'dropdownTitle', and 'monthsForDropdown'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDisplayMonths' needs the current value of 'monthsForDropdown'.","ArrayExpression",["59"],["57"],["58"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [date_picker_context, dropdownTitle, monthsForDropdown]",{"range":"62","text":"63"},[1982,1984],"[date_picker_context, dropdownTitle, monthsForDropdown]"]