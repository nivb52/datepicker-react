{"version":3,"sources":["datepicker/datepickerContext.js","datepicker/Config.js","datepicker/helpers/calendar.js","datepicker/Datepicker.jsx","date_picker_demo.js","App.js","serviceWorker.js","index.js"],"names":["datepickerContext","React","createContext","selectedDate","setSelectedDate","maxMonths","Config","default_headline","CALENDAR_WEEK_DAYS","navigator","language","THIS_YEAR","Date","getFullYear","THIS_MONTH","getMonth","getMonthsObj","monthsToInit","month","year","months","i","getEmptyDates","firstMonthDate","getDay","getMonthFirstDay","emptyDates","push","getMonthDates","monthDays","totalMonthDays","includes","_calcMonthDays","_isNextMonth","diff","_isPrevMonth","Datepicker","date_picker_context","useContext","DatepickerContext","useState","monthDates","setMonthDates","setEmptyDates","currentMonth","setCurrentMonth","currentYear","setCurrentYear","dropdownIsShow","setDropdownIsShow","dropdownTitle","setDropdownTitle","displayMonths","setDisplayMonths","monthsForDropdown","useEffect","monthDisplayStyle","value_of_months","Object","entries","map","month_dropdown","month_for_display","toLocaleString","isFirstMonth","isLastMonth","isBlockedDay","blockedDats","find","item","dd","mm","yy","getDate","handlePickMonth","value","dropdown_title","handleMonthArrow","getYearAfterDiff","getMonthAfterDiff","m","guideAvailable","guide2","headline","Consumer","className","onClick","style","direction","dayName","d","day","t","console","log","handlePickDate","contextType","App","setSelectedDateState","useCallback","Lang","guide1","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f28acd28.chunk.js","sourcesContent":["import React from 'react';\r\nconst datepickerContext = React.createContext({\r\n  selectedDate: [],\r\n  setSelectedDate: () => {},\r\n  maxMonths: 12, // @description: How much ahead you can see/book dates\r\n});\r\nexport default datepickerContext;\r\n","const Config = {\r\n  default_headline: 'תאריך יציאה',\r\n};\r\n\r\nexport default Config;\r\n","// Week days display names\r\nconst Lang = navigator.language || 'he-IL'; // if navigator is not supported\r\nconst WEEK_DAYS_HE = [\"א'\", \"ב'\", \"ג'\", \"ד'\", \"ה'\", \"ו'\", \"ש'\"];\r\nconst WEEK_DAYS_EN = ['Sun', 'Mon', 'Thu', 'Wen', 'The', 'Fri', 'Sat'];\r\nexport const CALENDAR_WEEK_DAYS =\r\n  Lang === 'he-IL' ? WEEK_DAYS_HE : WEEK_DAYS_EN;\r\n\r\n// init =>  current year\r\nexport const THIS_YEAR = +new Date().getFullYear();\r\n\r\n// init =>  current month (from 0 January - 11 December)\r\nexport const THIS_MONTH = +new Date().getMonth();\r\n\r\n// init => First day of the month : from 1 - 7\r\nexport const getMonthFirstDay = (month = THIS_MONTH, year = THIS_YEAR) => {\r\n  let t = new Date(year, month, 1);\r\n  return +t.getDay();\r\n};\r\n\r\n// init => Today\r\nexport const getTodayDate = () => {\r\n  let t = new Date();\r\n  return +t.getDate();\r\n};\r\n\r\n// init 1 year of calendar month =>\r\nexport const getMonthsObj = (\r\n  monthsToInit = 12,\r\n  month = THIS_MONTH,\r\n  year = THIS_YEAR\r\n) => {\r\n  const months = {};\r\n  for (let i = 0; i < monthsToInit; i++) {\r\n    months[i] = new Date(year, month, 1);\r\n    if (month < 11) month++;\r\n    else {\r\n      month = 0;\r\n      year++;\r\n    }\r\n  }\r\n  return months;\r\n};\r\n\r\nexport const CALENDAR_MONTHS = getMonthsObj();\r\n\r\n// init => Number days in a month for a given year from 28 - 31\r\nconst _calcMonthDays = (month = THIS_MONTH, year = THIS_YEAR) => {\r\n  const months30 = [3, 5, 8, 10]; //3 => is 4 = APRIL ...\r\n  const leapYear = year % 4 === 0;\r\n  // February: 28 or 29\r\n  if (month === 1) return leapYear ? 29 : 28;\r\n  // OTHER MONTHS\r\n  else return months30.includes(month) ? 30 : 31;\r\n};\r\n\r\nexport const getEmptyDates = (month = THIS_MONTH, year = THIS_YEAR) => {\r\n  let firstMonthDate = getMonthFirstDay(month, year);\r\n  const emptyDates = [];\r\n  for (let i = 1; i < firstMonthDate; i++) {\r\n    emptyDates.push('');\r\n  }\r\n  return emptyDates;\r\n};\r\n\r\nexport const getMonthDates = (month = THIS_MONTH, year = THIS_YEAR) => {\r\n  const monthDays = [];\r\n  let totalMonthDays = _calcMonthDays(month, year);\r\n  for (let i = 1; i <= totalMonthDays; i++) {\r\n    monthDays.push(i);\r\n  }\r\n\r\n  return monthDays;\r\n};\r\n\r\nconst _isNextMonth = (month, diff) => {\r\n  return month === 11 && diff > 0;\r\n};\r\nconst _isPrevMonth = (month, diff) => {\r\n  return month === 0 && diff < 0;\r\n};\r\n\r\nexport const getYearAfterDiff = (year, month, diff) => {\r\n  return _isNextMonth(month, diff)\r\n    ? year + 1\r\n    : _isPrevMonth(month, diff)\r\n    ? year - 1\r\n    : year;\r\n};\r\n\r\nexport const getMonthAfterDiff = (month, diff) => {\r\n  return _isNextMonth(month, diff)\r\n    ? 0\r\n    : _isPrevMonth(month, diff)\r\n    ? 11\r\n    : month + diff;\r\n};\r\n\r\nexport const calcIsLastMonth = (month, year, maxDiffAllowed) => {\r\n  const yearDiff = year - THIS_YEAR;\r\n  const diff = yearDiff * 11 + month - THIS_MONTH;\r\n  return maxDiffAllowed - 2 <= diff ? true : false;\r\n};\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport DatepickerContext from './datepickerContext';\r\n\r\nimport Config from './Config';\r\n\r\nimport {\r\n  CALENDAR_WEEK_DAYS,\r\n  THIS_YEAR,\r\n  THIS_MONTH,\r\n  getMonthsObj,\r\n  getMonthDates,\r\n  getEmptyDates,\r\n  getTodayDate,\r\n  getYearAfterDiff,\r\n  getMonthAfterDiff,\r\n  calcIsLastMonth,\r\n} from './helpers/calendar';\r\n\r\nimport './datepicker.css';\r\n\r\nfunction Datepicker() {\r\n  const date_picker_context = useContext(DatepickerContext);\r\n\r\n  const [monthDates, setMonthDates] = useState(getMonthDates());\r\n  const [emptyDates, setEmptyDates] = useState(getEmptyDates());\r\n  const [currentMonth, setCurrentMonth] = useState(THIS_MONTH);\r\n  const [currentYear, setCurrentYear] = useState(THIS_YEAR);\r\n  const [dropdownIsShow, setDropdownIsShow] = useState(false);\r\n  const [dropdownTitle, setDropdownTitle] = useState('');\r\n\r\n  const [displayMonths, setDisplayMonths] = useState([]);\r\n  const [monthsForDropdown, setMonthsForDropdown] = useState(\r\n    getMonthsObj(date_picker_context.maxMonths)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const { monthDisplayStyle } = date_picker_context;\r\n    const value_of_months = [];\r\n    // GET DATES OBJ TO DISPLAY AT DROPDOWN AS MONTH AND YEAR\r\n    setDisplayMonths(\r\n      Object.entries(monthsForDropdown).map((month_dropdown) => {\r\n        let month_for_display = month_dropdown[1].toLocaleString('default', {\r\n          month: monthDisplayStyle || 'long',\r\n        });\r\n        month_for_display += ' ' + month_dropdown[1].getFullYear();\r\n        value_of_months.push([\r\n          month_dropdown[1].getFullYear(),\r\n          month_dropdown[1].getMonth(),\r\n        ]);\r\n        return month_for_display;\r\n      })\r\n    );\r\n\r\n    if (dropdownTitle || !monthsForDropdown[0]) return;\r\n    // DEFAULT HEADLINE / TITLE :\r\n    setDropdownTitle(\r\n      monthsForDropdown[0].toLocaleString('default', { month: 'long' }) +\r\n        ' ' +\r\n        monthsForDropdown[0].getFullYear()\r\n    );\r\n  }, []);\r\n\r\n  // GENERAL DROPDOWN\r\n  const openDropdown = () => {\r\n    setDropdownIsShow(!dropdownIsShow);\r\n  };\r\n\r\n  const closeDropdown = () => {\r\n    dropdownIsShow && setDropdownIsShow(false);\r\n  };\r\n\r\n  const isFirstMonth = () => {\r\n    return currentMonth === THIS_MONTH && currentYear === THIS_YEAR;\r\n  };\r\n\r\n  const isLastMonth = () => {\r\n    const { maxMonths } = date_picker_context;\r\n    return calcIsLastMonth(currentMonth, currentYear, maxMonths);\r\n    // return currentMonth === THIS_MONTH && currentYear !== THIS_YEAR;\r\n  };\r\n\r\n  const isBlockedDay = (i) => {\r\n    const { blockedDats } = date_picker_context;\r\n    i++; // location 0 is really 1st of the month\r\n    return (\r\n      (blockedDats &&\r\n        blockedDats.find(\r\n          (item) =>\r\n            item.dd === i && item.mm === currentMonth && item.yy === currentYear\r\n        )) ||\r\n      (THIS_YEAR === currentYear &&\r\n        THIS_MONTH === currentMonth &&\r\n        i < getTodayDate())\r\n    );\r\n  };\r\n\r\n  const handlePickDate = (i) => {\r\n    if (isBlockedDay(i)) return;\r\n    i++;\r\n    let t = new Date(currentYear, currentMonth, i);\r\n    let selectedDate = [currentYear, currentMonth, i];\r\n    // CHECK IF NEED TO CLEAR IT (DOUBLE CLICK ON THE SAME DATE)\r\n    selectedDate =\r\n      date_picker_context.selectedDate[0] === selectedDate[0] &&\r\n      date_picker_context.selectedDate[1] === selectedDate[1] &&\r\n      date_picker_context.selectedDate[2] === selectedDate[2]\r\n        ? []\r\n        : selectedDate;\r\n\r\n    date_picker_context.setSelectedDate(selectedDate);\r\n    // RETURN IF WE CLEARED THE DATE :\r\n    if (!selectedDate[0]) return;\r\n\r\n    console.log(t); // DISPLAY DATE OBJECT\r\n  };\r\n\r\n  // DROPDOWN\r\n  const handlePickMonth = (value) => {\r\n    const [year, month, dropdown_title] = value;\r\n    // CREATE THE DATES :\r\n    setMonthDates(getMonthDates(+month, +year));\r\n    setEmptyDates(getEmptyDates(+month, +year));\r\n    // monthDates,\r\n    // emptyDates,\r\n    setCurrentMonth(+month);\r\n    setCurrentYear(+year);\r\n    setDropdownTitle(dropdown_title);\r\n    // });\r\n  };\r\n\r\n  //ARROWS\r\n  const handleMonthArrow = (diff) => {\r\n    // CHEACK IF LAST MONTH OR MORE THAN 12 MONTHS FROM NOW\r\n    if (diff < 0 && isFirstMonth()) return;\r\n    if (diff > 0 && isLastMonth()) return;\r\n\r\n    // CALC AND CHANGE MONTH AND YEAR\r\n    let year = getYearAfterDiff(currentYear, currentMonth, diff);\r\n    let month = getMonthAfterDiff(currentMonth, diff);\r\n\r\n    //GET THE DATA IN ORDER TO USE: (fn) handlePickMonth\r\n    let m = new Date(year, month, 1);\r\n    let dropdown_title = m.toLocaleString('default', { month: 'long' });\r\n    dropdown_title += ' ' + m.getFullYear();\r\n    const value = [year, month, dropdown_title];\r\n    handlePickMonth(value);\r\n  };\r\n\r\n  //titles\r\n  const {\r\n    guideAvailable,\r\n    guide2,\r\n    headline = Config.default_headline,\r\n  } = date_picker_context;\r\n  //state\r\n\r\n  return (\r\n    <DatepickerContext.Consumer>\r\n      {({ selectedDate }) => (\r\n        <div\r\n          className=\"datepicker-container\"\r\n          onClick={() => closeDropdown()}\r\n          style={{ direction: 'rtl' }}>\r\n          <div className=\"close\"></div>\r\n          <span className=\"datepicker-headline\">{headline}</span>\r\n\r\n          <div className=\"months-container\" onClick={() => openDropdown()}>\r\n            <div className=\"months-dropdown\">\r\n              <span>\r\n                <i\r\n                  className={\r\n                    'dorpdown-arrow ' + (dropdownIsShow ? 'up' : 'down')\r\n                  }></i>\r\n                {dropdownTitle}\r\n              </span>\r\n\r\n              <ul\r\n                className={\r\n                  'months-select ' + (dropdownIsShow ? 'show' : 'hide')\r\n                }>\r\n                {displayMonths.map((month, i) => (\r\n                  <li\r\n                    className=\"month\"\r\n                    key={i}\r\n                    onClick={() =>\r\n                      handlePickMonth([\r\n                        monthsForDropdown[i].getFullYear(),\r\n                        monthsForDropdown[i].getMonth(),\r\n                        month,\r\n                      ])\r\n                    }>\r\n                    {month}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className=\"arrows\">\r\n            <i\r\n              className={'arrow right ' + (isFirstMonth() ? ' disabeld' : '')}\r\n              onClick={() => handleMonthArrow(-1)}></i>\r\n\r\n            <i\r\n              className={'arrow left ' + (isLastMonth() ? ' disabeld' : '')}\r\n              onClick={() => handleMonthArrow(1)}></i>\r\n          </div>\r\n\r\n          <div className=\"calendar\">\r\n            <div className=\"dates\">\r\n              {CALENDAR_WEEK_DAYS.map((dayName) => (\r\n                <div className=\"day\" key={dayName}>\r\n                  {dayName}\r\n                </div>\r\n              ))}\r\n\r\n              {emptyDates.map((d, i) => (\r\n                <div className=\"date-number empty\" key={i}></div>\r\n              ))}\r\n\r\n              {monthDates.map((day, i) => (\r\n                <div\r\n                  className={\r\n                    isBlockedDay(i)\r\n                      ? 'date-number unavailable'\r\n                      : selectedDate &&\r\n                        currentYear === selectedDate[0] &&\r\n                        currentMonth === selectedDate[1] &&\r\n                        day === selectedDate[2]\r\n                      ? 'date-number  available selected'\r\n                      : 'date-number available'\r\n                  }\r\n                  key={i}\r\n                  onClick={() => handlePickDate(i)}>\r\n                  {day}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"date-picker guide-container\">\r\n            <div className=\"guide\">\r\n              <i className=\"date-number available\"></i>\r\n              <span> {guideAvailable}</span>\r\n            </div>\r\n            <div className=\"guide\">\r\n              <i className=\"guide-circle charter\"></i>\r\n              <span>{guide2}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </DatepickerContext.Consumer>\r\n  );\r\n}\r\n\r\nDatepicker.contextType = DatepickerContext;\r\nexport default Datepicker;\r\n","export const guide1_En = 'Departure and return dates are possible';\r\nexport const guide2_En = 'Possibility of charter flights on these dates';\r\nexport const headline_En = 'Exit Date';\r\n\r\nexport const guide1_He = 'תאריכי יציאה וחזרה אפשריים';\r\nexport const guide2_He = `אפשרות טיסת צ'רטר בתאריכים אלו`;\r\nexport const headline_He = 'תאריך יציאה';\r\n\r\nconst d = new Date();\r\nconst mm = d.getMonth() === 11 ? 0 : d.getMonth() + 1;\r\nexport const blockedDats = [\r\n  { dd: 2, mm, yy: 2021 },\r\n  { dd: 4, mm, yy: 2021 },\r\n  { dd: 6, mm, yy: 2021 },\r\n  { dd: 8, mm, yy: 2021 },\r\n  { dd: 10, mm, yy: 2021 },\r\n  { dd: 12, mm, yy: 2021 },\r\n  { dd: 19, mm, yy: 2021 },\r\n  { dd: 27, mm, yy: 2021 },\r\n  { dd: 28, mm, yy: 2021 },\r\n];\r\n","import React, { useState, useCallback } from 'react';\r\nimport './App.css';\r\n\r\nimport Datepicker from './datepicker/Datepicker';\r\nimport DatepickerContext from './datepicker/datepickerContext.js';\r\nimport {\r\n  guide1_En,\r\n  guide2_En,\r\n  headline_En,\r\n  guide1_He,\r\n  guide2_He,\r\n  headline_He,\r\n  blockedDats,\r\n} from './date_picker_demo';\r\n\r\nfunction App() {\r\n  const [selectedDate, setSelectedDateState] = useState([]);\r\n  const setSelectedDate = useCallback(setSelectedDateState);\r\n  const Lang = navigator.language || 'he-IL';\r\n  const guide1 = Lang === 'he-IL' ? guide1_He : guide1_En;\r\n  const guide2 = Lang === 'he-IL' ? guide2_He : guide2_En;\r\n  const headline = Lang === 'he-IL' ? headline_He : headline_En;\r\n\r\n  const maxMonths = 12; // @description: How much ahead you can see/book dates\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <DatepickerContext.Provider\r\n        value={{\r\n          selectedDate,\r\n          setSelectedDate,\r\n          monthDisplayStyle: 'long',\r\n          blockedDats,\r\n          maxMonths,\r\n          headline,\r\n          guideAvailable: guide1,\r\n          guide2,\r\n        }}>\r\n        <Datepicker />\r\n      </DatepickerContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}